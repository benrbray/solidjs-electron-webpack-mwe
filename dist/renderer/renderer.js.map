{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"solid-js\"","webpack:///./node_modules/solid-js/dist/index.js","webpack:///./node_modules/solid-js/dist/dom/index.js","webpack:///./src/renderer/render.jsx","webpack:///./src/renderer/index.js"],"names":["Renderer","constructor","_react","init","App","state","setState","createState","filePath","createEffect","console","log","count","setCount","createSignal","timer","setInterval","onCleanup","clearInterval","AppSidebar","AppContent","AppFooter","l","render","document","body","renderer","onload"],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,qC;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4BAA4B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4G,wDAAwD;AACpK;AACA;AACA;AACA,kHAAkH;AAClH;AACA,IAAI,4DAA4D;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqH;AACrH,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA,GAAG;AACH,sDAAsD;AACtD;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA,KAAK;AACL,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,SAAS;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,0GAA0G;AAC/K;AACA;AACA;AACA;AACA,iEAAiE,4HAA4H;AAC7L;AACA;AACA;AACA,uBAAuB,aAAa;AACpC,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,wDAAwD,iDAAiD;AACzG,oDAAoD,oEAAoE;AACxH;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxmBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB,GAAG,0BAA0B;AAC7D;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEihB;;;ACnxC/a;AACgE;;AAElK;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA,wEAAwE;AACxE;AACA;AACA,EAAE,UAAU;AACZ;AACA;AACA,GAAG;AACH;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA,MAAM,UAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G,YAAY,MAAM,KAAK;AACjI;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY;AAChB,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,YAAY;AACd;AACA,SAAS,UAAM,iDAAiD;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB,oBAAoB,KAAK;AACzB,SAAS,gBAAgB,KAAK;AAC9B;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,oDAAoD;AACpD,8DAA8D;AAC9D,OAAO,2DAA2D,mBAAmB;AACrF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,uBAAuB;AACvB,iBAAiB,EAAE,GAAG,UAAM,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C,OAAO;AACP,4BAA4B,oBAAoB;AAChD,OAAO;AACP;AACA,qBAAqB,IAAI,IAAI,UAAM,cAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAM;AACf;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,oBAAoB;AACpB;AACA,sBAAsB;AACtB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa,iCAAiC,sHAAsH,2DAA2D,kEAAkE,IAAI,uBAAuB,8CAA8C,IAAI;AAC9X;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,2BAA2B,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,IAAI,YAAY;AAChB;AACA,EAAE,YAAY,OAAO,UAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH,IAAI,YAAY;AAChB;AACA,GAAG;AACH;AACA;AACA,MAAM,YAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA,KAAK,4DAA4D;AACjE;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA,0GAA0G;AAC1G,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,6CAA6C,mBAAmB;AACrE,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH,qBAAqB,MAAM;AAC3B;AACA;AACA,EAAE,SAAS;AACX;AACA;AACA,SAAS,WAAO;AAChB,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA,mCAAmC,MAAM,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgW;;;;;;;;;;;;;;;;ACpyBhW;AACA;;AAEA,MAAMA,eAAN,CAAe;AAEdC,aAAW,GAAG;AACb,SAAKC,MAAL,GAAc,IAAd;AACA;;AAEDC,MAAI,GAAG;AACN,UAAMC,GAAG,GAAG,MAAM;AACjB;AACA,UAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBC,yCAAW,CAAC;AAACC,gBAAQ,EAAC;AAAV,OAAD,CAAnC;AACA,WAAKN,MAAL,GAAc;AAAEG,aAAF;AAASC;AAAT,OAAd,CAHiB,CAKjB;;AACAG,gDAAY,CAAC,MAAIC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BN,KAAK,CAACG,QAAnC,EAA6C,QAA7C,CAAL,CAAZ;AAEA,YAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBC,0CAAY,CAAC,CAAD,CAAtC;AAAA,YACAC,KAAK,GAAGC,WAAW,CAAC,MAAMH,QAAQ,CAACD,KAAK,KAAK,CAAX,CAAf,EAA8B,IAA9B,CADnB;AAEAK,6CAAS,CAAC,MAAMC,aAAa,CAACH,KAAD,CAApB,CAAT,CAViB,CAYjB;;AACA,YAAMI,UAAU,GAAG,MAAM;AACxB;AAGA,OAJD;;AAMA,YAAMC,UAAU,GAAG,MAAM;AACxB;AAAA;AAAA;;AAAA,8BAAoCR,KAAK,EAAzC;;AAAA;AAAA;AACA,OAFD;;AAIA,YAAMS,SAAS,GAAG,MAAM;AACvB;AAAA;AAAA;;AAAA,0BAC2B,MAAMf,QAAQ,CAAC,UAAD,EAAagB,CAAC,IAAIA,CAAC,GAAG,GAAtB,CADzC;;AAAA,8BAEmBjB,KAAK,CAACG,QAFzB;;AAAA;AAAA;AAKA,OAND;;AAQA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAKA,KApCD;;AAsCAe,UAAM,CAAC,MAAM,wBAAP,EAAgBC,QAAQ,CAACC,IAAzB,CAAN;AACA;;AA9Ca;;AAiDAzB,mEAAf;;;;CClDA;;AAEA,IAAI0B,QAAJ;;AAEAC,MAAM,GAAG,YAAU;AAClBD,UAAQ,GAAG,IAAI1B,eAAJ,EAAX;AACA0B,UAAQ,CAACvB,IAAT;AACA,CAHD,C","file":"renderer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"solid-js\");","let taskIdCounter = 1,\n    isCallbackScheduled = false,\n    isPerformingWork = false,\n    taskQueue = [],\n    currentTask = null,\n    shouldYieldToHost = null,\n    yieldInterval = 5,\n    deadline = 0,\n    maxYieldInterval = 300,\n    scheduleCallback = null,\n    scheduledCallback = null;\nconst maxSigned31BitInt = 1073741823;\nfunction setupScheduler() {\n  if (window && window.MessageChannel) {\n    const channel = new MessageChannel(),\n          port = channel.port2;\n    scheduleCallback = () => port.postMessage(null);\n    channel.port1.onmessage = () => {\n      if (scheduledCallback !== null) {\n        const currentTime = performance.now();\n        deadline = currentTime + yieldInterval;\n        const hasTimeRemaining = true;\n        try {\n          const hasMoreWork = scheduledCallback(hasTimeRemaining, currentTime);\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          } else port.postMessage(null);\n        } catch (error) {\n          port.postMessage(null);\n          throw error;\n        }\n      }\n    };\n  } else {\n    let _callback;\n    scheduleCallback = () => {\n      if (!_callback) {\n        _callback = scheduledCallback;\n        setTimeout(() => {\n          const currentTime = performance.now();\n          deadline = currentTime + yieldInterval;\n          const hasMoreWork = _callback(true, currentTime);\n          _callback = null;\n          if (hasMoreWork) scheduleCallback();\n        }, 0);\n      }\n    };\n  }\n  if (navigator && navigator.scheduling && navigator.scheduling.isInputPending) {\n    const scheduling = navigator.scheduling;\n    shouldYieldToHost = () => {\n      const currentTime = performance.now();\n      if (currentTime >= deadline) {\n        if (scheduling.isInputPending()) {\n          return true;\n        }\n        return currentTime >= maxYieldInterval;\n      } else {\n        return false;\n      }\n    };\n  } else {\n    shouldYieldToHost = () => performance.now() >= deadline;\n  }\n}\nfunction enqueue(taskQueue, task) {\n  function findIndex() {\n    let m = 0;\n    let n = taskQueue.length - 1;\n    while (m <= n) {\n      let k = n + m >> 1;\n      let cmp = task.expirationTime - taskQueue[k].expirationTime;\n      if (cmp > 0) m = k + 1;else if (cmp < 0) n = k - 1;else return k;\n    }\n    return m;\n  }\n  taskQueue.splice(findIndex(), 0, task);\n}\nfunction requestCallback(fn, options) {\n  if (!scheduleCallback) setupScheduler();\n  let startTime = performance.now(),\n      timeout = maxSigned31BitInt;\n  if (options && options.timeout) timeout = options.timeout;\n  const newTask = {\n    id: taskIdCounter++,\n    fn,\n    startTime,\n    expirationTime: startTime + timeout\n  };\n  enqueue(taskQueue, newTask);\n  if (!isCallbackScheduled && !isPerformingWork) {\n    isCallbackScheduled = true;\n    scheduledCallback = flushWork;\n    scheduleCallback();\n  }\n  return newTask;\n}\nfunction cancelCallback(task) {\n  task.fn = null;\n}\nfunction flushWork(hasTimeRemaining, initialTime) {\n  isCallbackScheduled = false;\n  isPerformingWork = true;\n  try {\n    return workLoop(hasTimeRemaining, initialTime);\n  } finally {\n    currentTask = null;\n    isPerformingWork = false;\n  }\n}\nfunction workLoop(hasTimeRemaining, initialTime) {\n  let currentTime = initialTime;\n  currentTask = taskQueue[0] || null;\n  while (currentTask !== null) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      break;\n    }\n    const callback = currentTask.fn;\n    if (callback !== null) {\n      currentTask.fn = null;\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      callback(didUserCallbackTimeout);\n      currentTime = performance.now();\n      if (currentTask === taskQueue[0]) {\n        taskQueue.shift();\n      }\n    } else taskQueue.shift();\n    currentTask = taskQueue[0] || null;\n  }\n  return currentTask !== null;\n}\n\nconst equalFn = (a, b) => a === b;\nconst ERROR = Symbol(\"error\");\nconst NOTPENDING = {};\nconst STALE = 1;\nconst PENDING = 2;\nconst UNOWNED = {\n  owned: null,\n  cleanups: null,\n  context: null,\n  owner: null\n};\nlet Owner = null;\nlet Listener = null;\nlet Pending = null;\nlet Updates = null;\nlet Afters = [];\nlet ExecCount = 0;\nfunction createRoot(fn, detachedOwner) {\n  detachedOwner && (Owner = detachedOwner);\n  const listener = Listener,\n        owner = Owner,\n        root = fn.length === 0 ? UNOWNED : {\n    owned: null,\n    cleanups: null,\n    context: null,\n    owner\n  };\n  Owner = root;\n  Listener = null;\n  let result;\n  try {\n    result = fn(() => cleanNode(root));\n  } catch (err) {\n    const fns = lookup(Owner, ERROR);\n    if (!fns) throw err;\n    fns.forEach(f => f(err));\n  } finally {\n    while (Afters.length) Afters.shift()();\n    Listener = listener;\n    Owner = owner;\n  }\n  return result;\n}\nfunction createSignal(value, areEqual) {\n  const s = {\n    value,\n    observers: null,\n    observerSlots: null,\n    pending: NOTPENDING,\n    comparator: areEqual ? typeof areEqual === \"function\" ? areEqual : equalFn : undefined\n  };\n  return [readSignal.bind(s), writeSignal.bind(s)];\n}\nfunction createEffect(fn, value) {\n  updateComputation(createComputation(fn, value));\n}\nfunction createDependentEffect(fn, deps, defer) {\n  const resolved = Array.isArray(deps) ? callAll(deps) : deps;\n  defer = !!defer;\n  createEffect(value => {\n    const listener = Listener;\n    resolved();\n    if (defer) defer = false;else {\n      Listener = null;\n      value = fn(value);\n      Listener = listener;\n    }\n    return value;\n  });\n}\nfunction createMemo(fn, value, areEqual) {\n  const c = createComputation(fn, value);\n  c.pending = NOTPENDING;\n  c.observers = null;\n  c.observerSlots = null;\n  c.comparator = areEqual ? typeof areEqual === \"function\" ? areEqual : equalFn : undefined;\n  updateComputation(c);\n  return readSignal.bind(c);\n}\nfunction createDeferred(fn, options) {\n  let t,\n      timeout = options ? options.timeoutMs : undefined;\n  const [deferred, setDeferred] = createSignal(fn());\n  createEffect(() => {\n    fn();\n    if (!t || !t.fn) t = requestCallback(() => setDeferred(fn()), timeout !== undefined ? {\n      timeout\n    } : undefined);\n  });\n  return deferred;\n}\nfunction freeze(fn) {\n  let pending = Pending,\n      q = Pending = [];\n  const result = fn();\n  Pending = pending;\n  runUpdates(() => {\n    for (let i = 0; i < q.length; i += 1) {\n      const data = q[i];\n      if (data.pending !== NOTPENDING) {\n        const pending = data.pending;\n        data.pending = NOTPENDING;\n        writeSignal.call(data, pending);\n      }\n    }\n  });\n  return result;\n}\nfunction sample(fn) {\n  let result,\n      listener = Listener;\n  Listener = null;\n  result = fn();\n  Listener = listener;\n  return result;\n}\nfunction afterEffects(fn) {\n  Afters.push(fn);\n}\nfunction onCleanup(fn) {\n  if (Owner === null) console.warn(\"cleanups created outside a `createRoot` or `render` will never be run\");else if (Owner.cleanups === null) Owner.cleanups = [fn];else Owner.cleanups.push(fn);\n  return fn;\n}\nfunction onError(fn) {\n  if (Owner === null) console.warn(\"error handlers created outside a `createRoot` or `render` will never be run\");else if (Owner.context === null) Owner.context = {\n    [ERROR]: [fn]\n  };else if (!Owner.context[ERROR]) Owner.context[ERROR] = [fn];else Owner.context[ERROR].push(fn);\n}\nfunction isListening() {\n  return Listener !== null;\n}\nfunction createContext(defaultValue) {\n  const id = Symbol(\"context\");\n  return {\n    id,\n    Provider: createProvider(id),\n    defaultValue\n  };\n}\nfunction useContext(context) {\n  return lookup(Owner, context.id) || context.defaultValue;\n}\nfunction getContextOwner() {\n  return Owner;\n}\nfunction readSignal() {\n  if (this.state && this.sources) {\n    const updates = Updates;\n    Updates = null;\n    this.state === STALE ? updateComputation(this) : lookDownstream(this);\n    Updates = updates;\n  }\n  if (Listener) {\n    const sSlot = this.observers ? this.observers.length : 0;\n    if (!Listener.sources) {\n      Listener.sources = [this];\n      Listener.sourceSlots = [sSlot];\n    } else {\n      Listener.sources.push(this);\n      Listener.sourceSlots.push(sSlot);\n    }\n    if (!this.observers) {\n      this.observers = [Listener];\n      this.observerSlots = [Listener.sources.length - 1];\n    } else {\n      this.observers.push(Listener);\n      this.observerSlots.push(Listener.sources.length - 1);\n    }\n  }\n  return this.value;\n}\nfunction writeSignal(value) {\n  if (this.comparator && this.comparator(this.value, value)) return value;\n  if (Pending) {\n    if (this.pending === NOTPENDING) Pending.push(this);\n    this.pending = value;\n    return value;\n  }\n  this.value = value;\n  if (this.observers && (!Updates || this.observers.length)) {\n    runUpdates(() => {\n      for (let i = 0; i < this.observers.length; i += 1) {\n        const o = this.observers[i];\n        if (o.observers && o.state !== PENDING) markUpstream(o);\n        o.state = STALE;\n        if (Updates.length > 10e5) throw new Error(\"Potential Infinite Loop Detected.\");\n        Updates.push(o);\n      }\n    });\n  }\n  return value;\n}\nfunction updateComputation(node) {\n  if (!node.fn) return;\n  cleanNode(node);\n  const owner = Owner,\n        listener = Listener,\n        time = ExecCount;\n  Listener = Owner = node;\n  const nextValue = node.fn(node.value);\n  if (!node.updatedAt || node.updatedAt <= time) {\n    if (node.observers && node.observers.length) {\n      writeSignal.call(node, nextValue);\n    } else node.value = nextValue;\n    node.updatedAt = time;\n  }\n  Listener = listener;\n  Owner = owner;\n}\nfunction createComputation(fn, init) {\n  const c = {\n    fn,\n    state: 0,\n    updatedAt: null,\n    owned: null,\n    sources: null,\n    sourceSlots: null,\n    cleanups: null,\n    value: init,\n    owner: Owner,\n    context: null\n  };\n  if (Owner === null) console.warn(\"computations created outside a `createRoot` or `render` will never be disposed\");else if (Owner !== UNOWNED) {\n    if (!Owner.owned) Owner.owned = [c];else Owner.owned.push(c);\n  }\n  return c;\n}\nfunction runTop(node) {\n  let top = node.state === STALE && node;\n  while (node.fn && (node = node.owner)) node.state === STALE && (top = node);\n  top && updateComputation(top);\n}\nfunction runUpdates(fn) {\n  if (Updates) return fn();\n  Updates = [];\n  ExecCount++;\n  try {\n    fn();\n    for (let i = 0; i < Updates.length; i += 1) {\n      try {\n        runTop(Updates[i]);\n      } catch (err) {\n        const fns = lookup(Owner, ERROR);\n        if (!fns) throw err;\n        fns.forEach(f => f(err));\n      }\n    }\n  } finally {\n    Updates = null;\n    while (Afters.length) Afters.shift()();\n  }\n}\nfunction lookDownstream(node) {\n  node.state = 0;\n  for (let i = 0; i < node.sources.length; i += 1) {\n    const source = node.sources[i];\n    if (source.sources) {\n      if (source.state === STALE) runTop(source);else if (source.state === PENDING) lookDownstream(source);\n    }\n  }\n}\nfunction markUpstream(node) {\n  for (let i = 0; i < node.observers.length; i += 1) {\n    const o = node.observers[i];\n    if (!o.state) {\n      o.state = PENDING;\n      o.observers && markUpstream(o);\n    }\n  }\n}\nfunction cleanNode(node) {\n  let i;\n  if (node.sources) {\n    while (node.sources.length) {\n      const source = node.sources.pop(),\n            index = node.sourceSlots.pop(),\n            obs = source.observers;\n      if (obs && obs.length) {\n        const n = obs.pop(),\n              s = source.observerSlots.pop();\n        if (index < obs.length) {\n          n.sourceSlots[s] = index;\n          obs[index] = n;\n          source.observerSlots[index] = s;\n        }\n      }\n    }\n    node.state = 0;\n  }\n  if (node.owned) {\n    for (i = 0; i < node.owned.length; i++) cleanNode(node.owned[i]);\n    node.owned = null;\n  }\n  if (node.cleanups) {\n    for (i = 0; i < node.cleanups.length; i++) node.cleanups[i]();\n    node.cleanups = null;\n  }\n}\nfunction callAll(ss) {\n  return () => {\n    for (let i = 0; i < ss.length; i++) ss[i]();\n  };\n}\nfunction lookup(owner, key) {\n  return owner && (owner.context && owner.context[key] || owner.owner && lookup(owner.owner, key));\n}\nfunction resolveChildren(children) {\n  if (typeof children === \"function\") return createMemo(() => resolveChildren(children()));\n  if (Array.isArray(children)) {\n    const results = [];\n    for (let i = 0; i < children.length; i++) {\n      let result = resolveChildren(children[i]);\n      Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n    }\n    return results;\n  }\n  return children;\n}\nfunction createProvider(id) {\n  return function provider(props) {\n    let rendered;\n    createEffect(() => {\n      Owner.context = {\n        [id]: props.value\n      };\n      rendered = sample(() => resolveChildren(props.children));\n    });\n    return rendered;\n  };\n}\n\nconst $RAW = Symbol(\"state-raw\"),\n      $NODE = Symbol(\"state-node\"),\n      $PROXY = Symbol(\"state-proxy\");\nfunction wrap(value, traps) {\n  return value[$PROXY] || (value[$PROXY] = new Proxy(value, traps || proxyTraps));\n}\nfunction isWrappable(obj) {\n  return obj != null && typeof obj === \"object\" && (obj.__proto__ === Object.prototype || Array.isArray(obj));\n}\nfunction unwrap(item) {\n  let result, unwrapped, v;\n  if (result = item != null && item[$RAW]) return result;\n  if (!isWrappable(item)) return item;\n  if (Array.isArray(item)) {\n    if (Object.isFrozen(item)) item = item.slice(0);\n    for (let i = 0, l = item.length; i < l; i++) {\n      v = item[i];\n      if ((unwrapped = unwrap(v)) !== v) item[i] = unwrapped;\n    }\n  } else {\n    if (Object.isFrozen(item)) item = Object.assign({}, item);\n    let keys = Object.keys(item);\n    for (let i = 0, l = keys.length; i < l; i++) {\n      v = item[keys[i]];\n      if ((unwrapped = unwrap(v)) !== v) item[keys[i]] = unwrapped;\n    }\n  }\n  return item;\n}\nfunction getDataNodes(target) {\n  let nodes = target[$NODE];\n  if (!nodes) target[$NODE] = nodes = {};\n  return nodes;\n}\nconst proxyTraps = {\n  get(target, property) {\n    if (property === $RAW) return target;\n    if (property === $PROXY || property === $NODE) return;\n    const value = target[property],\n          wrappable = isWrappable(value);\n    if (isListening() && (typeof value !== \"function\" || target.hasOwnProperty(property))) {\n      let nodes, node;\n      if (wrappable && (nodes = getDataNodes(value))) {\n        node = nodes._ || (nodes._ = createSignal());\n        node[0]();\n      }\n      nodes = getDataNodes(target);\n      node = nodes[property] || (nodes[property] = createSignal());\n      node[0]();\n    }\n    return wrappable ? wrap(value) : value;\n  },\n  set() {\n    return true;\n  },\n  deleteProperty() {\n    return true;\n  }\n};\nconst setterTraps = {\n  get(target, property) {\n    if (property === $RAW) return target;\n    const value = target[property];\n    return isWrappable(value) ? new Proxy(value, setterTraps) : value;\n  },\n  set(target, property, value) {\n    setProperty(target, property, unwrap(value));\n    return true;\n  },\n  deleteProperty(target, property) {\n    setProperty(target, property, undefined);\n    return true;\n  }\n};\nfunction setProperty(state, property, value, force) {\n  if (!force && state[property] === value) return;\n  const notify = Array.isArray(state) || !(property in state);\n  if (value === undefined) {\n    delete state[property];\n  } else state[property] = value;\n  let nodes = getDataNodes(state),\n      node;\n  (node = nodes[property]) && node[1]();\n  notify && (node = nodes._) && node[1]();\n}\nfunction mergeState(state, value, force) {\n  const keys = Object.keys(value);\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    setProperty(state, key, value[key], force);\n  }\n}\nfunction updatePath(current, path, traversed = []) {\n  let part,\n      next = current;\n  if (path.length > 1) {\n    part = path.shift();\n    const partType = typeof part,\n          isArray = Array.isArray(current);\n    if (Array.isArray(part)) {\n      for (let i = 0; i < part.length; i++) {\n        updatePath(current, [part[i]].concat(path), [part[i]].concat(traversed));\n      }\n      return;\n    } else if (isArray && partType === \"function\") {\n      for (let i = 0; i < current.length; i++) {\n        if (part(current[i], i)) updatePath(current, [i].concat(path), [i].concat(traversed));\n      }\n      return;\n    } else if (isArray && partType === \"object\") {\n      const {\n        from = 0,\n        to = current.length - 1,\n        by = 1\n      } = part;\n      for (let i = from; i <= to; i += by) {\n        updatePath(current, [i].concat(path), [i].concat(traversed));\n      }\n      return;\n    } else if (path.length > 1) {\n      updatePath(current[part], path, [part].concat(traversed));\n      return;\n    }\n    next = current[part];\n    traversed = [part].concat(traversed);\n  }\n  let value = path[0];\n  if (typeof value === \"function\") {\n    const wrapped = part === undefined || isWrappable(next) ? new Proxy(next, setterTraps) : next;\n    value = value(wrapped, traversed);\n    if (value === wrapped || value === undefined) return;\n  }\n  value = unwrap(value);\n  if (part === undefined || isWrappable(next) && isWrappable(value) && !Array.isArray(value)) {\n    mergeState(next, value);\n  } else setProperty(current, part, value);\n}\nfunction createState(state) {\n  const unwrappedState = unwrap(state || {});\n  const wrappedState = wrap(unwrappedState);\n  function setState(...args) {\n    freeze(() => updatePath(unwrappedState, args));\n  }\n  return [wrappedState, setState];\n}\n\nfunction applyState(target, parent, property, merge, key) {\n  let previous = parent[property];\n  if (target === previous) return;\n  if (!isWrappable(target) || !isWrappable(previous) || key && target[key] !== previous[key]) {\n    target !== previous && setProperty(parent, property, target);\n    return;\n  }\n  if (Array.isArray(target)) {\n    if (target.length && previous.length && (!merge || key && target[0][key] != null)) {\n      let i, j, start, end, newEnd, item, newIndicesNext, keyVal;\n      for (start = 0, end = Math.min(previous.length, target.length); start < end && (previous[start] === target[start] || key && previous[start][key] === target[start][key]); start++) {\n        applyState(target[start], previous, start, merge, key);\n      }\n      const temp = new Array(target.length),\n            newIndices = new Map();\n      for (end = previous.length - 1, newEnd = target.length - 1; end >= start && newEnd >= start && (previous[end] === target[newEnd] || key && previous[end][key] === target[newEnd][key]); end--, newEnd--) {\n        temp[newEnd] = previous[end];\n      }\n      if (start > newEnd || start > end) {\n        for (j = start; j <= newEnd; j++) setProperty(previous, j, target[j]);\n        for (; j < target.length; j++) {\n          setProperty(previous, j, temp[j]);\n          applyState(target[j], previous, j, merge, key);\n        }\n        if (previous.length > target.length) setProperty(previous, \"length\", target.length);\n        return;\n      }\n      newIndicesNext = new Array(newEnd + 1);\n      for (j = newEnd; j >= start; j--) {\n        item = target[j];\n        keyVal = key ? item[key] : item;\n        i = newIndices.get(keyVal);\n        newIndicesNext[j] = i === undefined ? -1 : i;\n        newIndices.set(keyVal, j);\n      }\n      for (i = start; i <= end; i++) {\n        item = previous[i];\n        keyVal = key ? item[key] : item;\n        j = newIndices.get(keyVal);\n        if (j !== undefined && j !== -1) {\n          temp[j] = previous[i];\n          j = newIndicesNext[j];\n          newIndices.set(keyVal, j);\n        }\n      }\n      for (j = start; j < target.length; j++) {\n        if (j in temp) {\n          setProperty(previous, j, temp[j]);\n          applyState(target[j], previous, j, merge, key);\n        } else setProperty(previous, j, target[j]);\n      }\n    } else {\n      for (let i = 0, len = target.length; i < len; i++) {\n        applyState(target[i], previous, i, merge, key);\n      }\n    }\n    if (previous.length > target.length) setProperty(previous, \"length\", target.length);\n    return;\n  }\n  const targetKeys = Object.keys(target);\n  for (let i = 0, len = targetKeys.length; i < len; i++) {\n    applyState(target[targetKeys[i]], previous, targetKeys[i], merge, key);\n  }\n  const previousKeys = Object.keys(previous);\n  for (let i = 0, len = previousKeys.length; i < len; i++) {\n    if (target[previousKeys[i]] === undefined) setProperty(previous, previousKeys[i], undefined);\n  }\n}\nfunction reconcile(value, options = {}) {\n  const {\n    merge,\n    key = \"id\"\n  } = options;\n  return state => {\n    state = unwrap(state);\n    if (!isWrappable(state)) return value;\n    applyState(value, {\n      state\n    }, \"state\", merge, key);\n  };\n}\n\nconst FALLBACK = Symbol(\"fallback\");\nfunction mapArray(list, mapFn, options) {\n  if (typeof mapFn !== \"function\") {\n    options = mapFn || {};\n    mapFn = list;\n    return map;\n  }\n  options || (options = {});\n  return map(list);\n  function map(list) {\n    let items = [],\n        mapped = [],\n        disposers = [],\n        len = 0,\n        indexes = mapFn.length > 1 ? [] : null;\n    onCleanup(() => {\n      for (let i = 0, length = disposers.length; i < length; i++) disposers[i]();\n    });\n    return () => {\n      let newItems = list() || [],\n          i,\n          j;\n      return sample(() => {\n        let newLen = newItems.length,\n            newIndices,\n            newIndicesNext,\n            temp,\n            tempdisposers,\n            tempIndexes,\n            start,\n            end,\n            newEnd,\n            item;\n        if (newLen === 0) {\n          if (len !== 0) {\n            for (i = 0; i < len; i++) disposers[i]();\n            disposers = [];\n            items = [];\n            mapped = [];\n            len = 0;\n            indexes && (indexes = []);\n          }\n          if (options.fallback) {\n            items = [FALLBACK];\n            mapped[0] = createRoot(disposer => {\n              disposers[0] = disposer;\n              return options.fallback();\n            });\n            len = 1;\n          }\n        }\n        else if (len === 0) {\n            for (j = 0; j < newLen; j++) {\n              items[j] = newItems[j];\n              mapped[j] = createRoot(mapper);\n            }\n            len = newLen;\n          } else {\n            temp = new Array(newLen);\n            tempdisposers = new Array(newLen);\n            indexes && (tempIndexes = new Array(newLen));\n            for (start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++);\n            for (end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--) {\n              temp[newEnd] = mapped[end];\n              tempdisposers[newEnd] = disposers[end];\n              indexes && (tempIndexes[newEnd] = indexes[end]);\n            }\n            if (start > newEnd) {\n              for (j = end; start <= j; j--) disposers[j]();\n              const rLen = end - start + 1;\n              if (rLen > 0) {\n                mapped.splice(start, rLen);\n                disposers.splice(start, rLen);\n                if (indexes) {\n                  indexes.splice(start, rLen);\n                  for (j = start; j < newLen; j++) indexes[j](j);\n                }\n              }\n              items = newItems.slice(0);\n              len = newLen;\n              return mapped;\n            }\n            if (start > end) {\n              for (j = start; j <= newEnd; j++) mapped[j] = createRoot(mapper);\n              for (; j < newLen; j++) {\n                mapped[j] = temp[j];\n                disposers[j] = tempdisposers[j];\n                if (indexes) {\n                  indexes[j] = tempIndexes[j];\n                  indexes[j](j);\n                }\n              }\n              items = newItems.slice(0);\n              len = newLen;\n              return mapped;\n            }\n            newIndices = new Map();\n            newIndicesNext = new Array(newEnd + 1);\n            for (j = newEnd; j >= start; j--) {\n              item = newItems[j];\n              i = newIndices.get(item);\n              newIndicesNext[j] = i === undefined ? -1 : i;\n              newIndices.set(item, j);\n            }\n            for (i = start; i <= end; i++) {\n              item = items[i];\n              j = newIndices.get(item);\n              if (j !== undefined && j !== -1) {\n                temp[j] = mapped[i];\n                tempdisposers[j] = disposers[i];\n                indexes && (tempIndexes[j] = indexes[i]);\n                j = newIndicesNext[j];\n                newIndices.set(item, j);\n              } else disposers[i]();\n            }\n            for (j = start; j < newLen; j++) {\n              if (j in temp) {\n                mapped[j] = temp[j];\n                disposers[j] = tempdisposers[j];\n                if (indexes) {\n                  indexes[j] = tempIndexes[j];\n                  indexes[j](j);\n                }\n              } else mapped[j] = createRoot(mapper);\n            }\n            len = mapped.length = newLen;\n            items = newItems.slice(0);\n          }\n        return mapped;\n      });\n      function mapper(disposer) {\n        disposers[j] = disposer;\n        if (indexes) {\n          const [s, set] = createSignal(j, true);\n          indexes[j] = set;\n          return mapFn(newItems[j], s);\n        }\n        return mapFn(newItems[j]);\n      }\n    };\n  }\n}\nfunction indexArray(list, mapFn, options) {\n  if (typeof mapFn !== \"function\") {\n    options = mapFn || {};\n    mapFn = list;\n    return map;\n  }\n  options || (options = {});\n  return map(list);\n  function map(list) {\n    let items = [],\n        mapped = [],\n        disposers = [],\n        signals = [],\n        len = 0,\n        i;\n    onCleanup(() => {\n      for (let i = 0, length = disposers.length; i < length; i++) disposers[i]();\n    });\n    return () => {\n      const newItems = list() || [];\n      return sample(() => {\n        if (newItems.length === 0) {\n          if (len !== 0) {\n            for (i = 0; i < len; i++) disposers[i]();\n            disposers = [];\n            items = [];\n            mapped = [];\n            len = 0;\n            signals = [];\n          }\n          if (options.fallback) {\n            items = [FALLBACK];\n            mapped[0] = createRoot(disposer => {\n              disposers[0] = disposer;\n              return options.fallback();\n            });\n            len = 1;\n          }\n          return mapped;\n        }\n        if (items[0] === FALLBACK) {\n          disposers[0]();\n          disposers = [];\n          items = [];\n          mapped = [];\n          len = 0;\n        }\n        for (i = 0; i < newItems.length; i++) {\n          if (i < items.length && items[i] !== newItems[i]) {\n            signals[i](newItems[i]);\n          } else if (i >= items.length) {\n            mapped[i] = createRoot(mapper);\n          }\n        }\n        for (; i < items.length; i++) {\n          disposers[i]();\n        }\n        len = mapped.length = signals.length = disposers.length = newItems.length;\n        items = newItems.slice(0);\n        return mapped;\n      });\n      function mapper(disposer) {\n        disposers[i] = disposer;\n        const [s, set] = createSignal(newItems[i]);\n        signals[i] = set;\n        return mapFn(s, i);\n      }\n    };\n  }\n}\n\nfunction dynamicProperty(props, key) {\n  const src = props[key];\n  Object.defineProperty(props, key, {\n    get() {\n      return src();\n    },\n    enumerable: true\n  });\n}\nfunction createComponent(Comp, props, dynamicKeys) {\n  if (dynamicKeys) {\n    for (let i = 0; i < dynamicKeys.length; i++) dynamicProperty(props, dynamicKeys[i]);\n  }\n  const c = sample(() => Comp(props));\n  return typeof c === \"function\" ? createMemo(c) : c;\n}\nfunction setDefaults(props, defaultProps) {\n  const propKeys = Object.keys(defaultProps);\n  for (let i = 0; i < propKeys.length; i++) {\n    const key = propKeys[i];\n    !(key in props) && (props[key] = defaultProps[key]);\n  }\n}\nfunction cloneProps(props) {\n  const clone = {},\n        descriptors = Object.getOwnPropertyDescriptors(props);\n  Object.defineProperties(clone, descriptors);\n  return clone;\n}\nfunction splitProps(props, ...keys) {\n  const descriptors = Object.getOwnPropertyDescriptors(props),\n        split = k => {\n    const clone = {};\n    for (let i = 0; i < k.length; i++) {\n      const key = k[i];\n      if (descriptors[key]) {\n        Object.defineProperty(clone, key, descriptors[key]);\n        delete descriptors[key];\n      }\n    }\n    return clone;\n  };\n  return keys.map(split).concat(split(Object.keys(descriptors)));\n}\n\nfunction createActivityTracker() {\n  let count = 0;\n  const [read, trigger] = createSignal(false);\n  return [read, () => count++ === 0 && trigger(true), () => --count <= 0 && trigger(false)];\n}\nconst SuspenseContext = createContext({});\nconst [active, increment, decrement] = createActivityTracker();\nSuspenseContext.active = active;\nSuspenseContext.increment = increment;\nSuspenseContext.decrement = decrement;\nfunction awaitSuspense(fn) {\n  return () => new Promise(resolve => {\n    const res = fn();\n    createEffect(() => !SuspenseContext.active() && resolve(res));\n  });\n}\nfunction createResource(value) {\n  const [s, set] = createSignal(value),\n        [trackPromise, triggerPromise] = createSignal(),\n        [trackLoading, triggerLoading] = createSignal(),\n        contexts = new Set();\n  let loading = false,\n      error = null,\n      pr;\n  function loadEnd(v) {\n    pr = undefined;\n    freeze(() => {\n      set(v);\n      loading && (loading = false, triggerLoading());\n      for (let c of contexts.keys()) c.decrement();\n      contexts.clear();\n    });\n  }\n  function read() {\n    const c = useContext(SuspenseContext),\n          v = s();\n    if (error) throw error;\n    trackPromise();\n    if (pr && c.increment && !contexts.has(c)) {\n      c.increment();\n      contexts.add(c);\n    }\n    return v;\n  }\n  function load(p) {\n    error = null;\n    if (p == null || typeof p !== \"object\" || !(\"then\" in p)) {\n      pr = undefined;\n      loadEnd(p);\n      return p;\n    } else {\n      pr = p;\n      if (!loading) {\n        loading = true;\n        freeze(() => {\n          triggerLoading();\n          triggerPromise();\n        });\n      }\n      return p.then(v => (pr === p && loadEnd(v), s()), err => (pr === p && (error = err, loadEnd(undefined)), s()));\n    }\n  }\n  Object.defineProperty(read, \"loading\", {\n    get() {\n      return trackLoading(), loading;\n    }\n  });\n  return [read, load];\n}\nfunction createResourceNode(v) {\n  const node = createSignal(),\n        [r, load] = createResource(v);\n  return [() => (r(), node[0]()), node[1], load, () => r.loading];\n}\nconst loadingTraps = {\n  get(nodes, property) {\n    const node = nodes[property] || (nodes[property] = createResourceNode(undefined));\n    return node[3]();\n  },\n  set() {\n    return true;\n  },\n  deleteProperty() {\n    return true;\n  }\n};\nconst resourceTraps = {\n  get(target, property) {\n    if (property === $RAW) return target;\n    if (property === $PROXY || property === $NODE) return;\n    if (property === \"loading\") return new Proxy(getDataNodes(target), loadingTraps);\n    const value = target[property],\n          wrappable = isWrappable(value);\n    if (isListening() && (typeof value !== \"function\" || target.hasOwnProperty(property))) {\n      let nodes, node;\n      if (wrappable && (nodes = getDataNodes(value))) {\n        node = nodes._ || (nodes._ = createSignal());\n        node[0]();\n      }\n      nodes = getDataNodes(target);\n      node = nodes[property] || (nodes[property] = createResourceNode(value));\n      node[0]();\n    }\n    return wrappable ? wrap(value) : value;\n  },\n  set() {\n    return true;\n  },\n  deleteProperty() {\n    return true;\n  }\n};\nfunction createResourceState(state) {\n  const unwrappedState = unwrap(state || {}),\n        wrappedState = wrap(unwrappedState, resourceTraps);\n  function setState(...args) {\n    freeze(() => updatePath(unwrappedState, args));\n  }\n  function loadState(v, r) {\n    const nodes = getDataNodes(unwrappedState),\n          keys = Object.keys(v);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i],\n            node = nodes[k] || (nodes[k] = createResourceNode(unwrappedState[k])),\n            resolver = v => (r ? setState(k, r(v)) : setProperty(unwrappedState, k, v), v),\n            p = node[2](v[k]);\n      typeof p === \"object\" && \"then\" in p ? p.then(resolver) : resolver(p);\n    }\n  }\n  return [wrappedState, loadState, setState];\n}\nfunction lazy(fn) {\n  return props => {\n    const hydrating = globalThis._$HYDRATION.context && globalThis._$HYDRATION.context.registry,\n          ctx = nextHydrateContext(),\n          [s, p] = createResource();\n    if (hydrating) {\n      fn().then(mod => p(mod.default));\n    } else p(fn().then(mod => mod.default));\n    let Comp;\n    return () => (Comp = s()) && sample(() => {\n      if (!ctx) return Comp(props);\n      const h = globalThis._$HYDRATION.context;\n      setHydrateContext(ctx);\n      const r = Comp(props);\n      !h && setHydrateContext();\n      return r;\n    });\n  };\n}\nfunction useTransition(config) {\n  const [pending, increment, decrement] = createActivityTracker();\n  return [pending, fn => {\n    const prevTransition = SuspenseContext.transition;\n    SuspenseContext.transition = {\n      timeoutMs: config.timeoutMs,\n      increment,\n      decrement\n    };\n    increment();\n    fn();\n    decrement();\n    afterEffects(() => SuspenseContext.transition = prevTransition);\n  }];\n}\nfunction suspend(fn) {\n  const {\n    state\n  } = useContext(SuspenseContext);\n  let cached;\n  return state ? (fn = createMemo(fn), () => state() === \"suspended\" ? cached : cached = fn()) : fn;\n}\nfunction setHydrateContext(context) {\n  globalThis._$HYDRATION.context = context;\n}\nfunction nextHydrateContext() {\n  const hydration = globalThis._$HYDRATION;\n  return hydration && hydration.context ? {\n    id: `${hydration.context.id}.${hydration.context.count++}`,\n    count: 0,\n    registry: hydration.context.registry\n  } : undefined;\n}\n\nfunction For(props) {\n  const fallback = \"fallback\" in props && {\n    fallback: () => props.fallback\n  };\n  return suspend(mapArray(() => props.each, props.children, fallback ? fallback : undefined));\n}\nfunction Index(props) {\n  const fallback = \"fallback\" in props && {\n    fallback: () => props.fallback\n  };\n  return suspend(indexArray(() => props.each, props.children, fallback ? fallback : undefined));\n}\nfunction Show(props) {\n  const childDesc = Object.getOwnPropertyDescriptor(props, \"children\").value,\n        callFn = typeof childDesc === \"function\" && childDesc.length,\n        condition = createMemo(callFn ? () => props.when : () => !!props.when, undefined, true);\n  return suspend(() => {\n    const c = condition();\n    return c ? callFn ? sample(() => props.children(c)) : props.children : props.fallback;\n  });\n}\nfunction Switch(props) {\n  let conditions = props.children;\n  Array.isArray(conditions) || (conditions = [conditions]);\n  const evalConditions = createMemo(() => {\n    for (let i = 0; i < conditions.length; i++) {\n      const c = conditions[i].when;\n      if (c) return [i, conditions[i].keyed ? c : !!c];\n    }\n    return [-1];\n  }, undefined, (a, b) => a && a[0] === b[0] && a[1] === b[1]);\n  return suspend(() => {\n    const [index, when] = evalConditions();\n    if (index < 0) return props.fallback;\n    const c = conditions[index].children;\n    return typeof c === \"function\" && c.length ? sample(() => c(when)) : c;\n  });\n}\nfunction Match(props) {\n  const childDesc = Object.getOwnPropertyDescriptor(props, \"children\").value;\n  props.keyed = typeof childDesc === \"function\" && childDesc.length;\n  return props;\n}\nfunction Dynamic(props) {\n  const [p, others] = splitProps(props, [\"component\"]);\n  return () => {\n    const comp = p.component;\n    return comp && sample(() => comp(others));\n  };\n}\n\nconst SuspenseListContext = createContext();\nfunction SuspenseList(props) {\n  let index = 0,\n      suspenseSetter,\n      showContent,\n      showFallback;\n  const listContext = useContext(SuspenseListContext);\n  if (listContext) {\n    const [state, stateSetter] = createSignal(\"running\", true);\n    suspenseSetter = stateSetter;\n    [showContent, showFallback] = listContext.register(state);\n  }\n  const registry = [],\n        comp = createComponent(SuspenseListContext.Provider, {\n    value: {\n      register: state => {\n        const [showingContent, showContent] = createSignal(false, true),\n              [showingFallback, showFallback] = createSignal(false, true);\n        registry[index++] = {\n          state,\n          showContent,\n          showFallback\n        };\n        return [showingContent, showingFallback];\n      }\n    },\n    children: () => props.children\n  }, [\"children\"]);\n  createEffect(() => {\n    const reveal = props.revealOrder,\n          tail = props.tail,\n          visibleContent = showContent ? showContent() : true,\n          visibleFallback = showFallback ? showFallback() : true,\n          reverse = reveal === \"backwards\";\n    if (reveal === \"together\") {\n      const all = registry.every(i => i.state() === \"running\");\n      suspenseSetter && suspenseSetter(all ? \"running\" : \"fallback\");\n      registry.forEach(i => {\n        i.showContent(all && visibleContent);\n        i.showFallback(visibleFallback);\n      });\n      return;\n    }\n    let stop = false;\n    for (let i = 0, len = registry.length; i < len; i++) {\n      const n = reverse ? len - i - 1 : i,\n            s = registry[n].state();\n      if (!stop && (s === \"running\" || s === \"suspended\")) {\n        registry[n].showContent(visibleContent);\n        registry[n].showFallback(visibleFallback);\n      } else {\n        const next = !stop;\n        if (next && suspenseSetter) suspenseSetter(\"fallback\");\n        if (!tail || next && tail === \"collapsed\") {\n          registry[n].showFallback(visibleFallback);\n        } else registry[n].showFallback(false);\n        stop = true;\n        registry[n].showContent(next);\n      }\n    }\n    if (!stop && suspenseSetter) suspenseSetter(\"running\");\n  });\n  return comp;\n}\nfunction Suspense(props) {\n  let counter = 0,\n      t,\n      showContent,\n      showFallback,\n      transition;\n  const [state, nextState] = createSignal(\"running\", true),\n        store = {\n    increment: () => {\n      if (++counter === 1) {\n        if (!store.initializing) {\n          if (SuspenseContext.transition) {\n            !transition && (transition = SuspenseContext.transition).increment();\n            t = setTimeout(() => nextState(\"fallback\"), SuspenseContext.transition.timeoutMs);\n            nextState(\"suspended\");\n          } else nextState(\"fallback\");\n        } else nextState(\"fallback\");\n        SuspenseContext.increment();\n      }\n    },\n    decrement: () => {\n      if (--counter === 0) {\n        t && clearTimeout(t);\n        transition && transition.decrement();\n        transition = undefined;\n        nextState(\"running\");\n        afterEffects(() => SuspenseContext.decrement());\n      }\n    },\n    state,\n    initializing: true\n  };\n  const listContext = useContext(SuspenseListContext);\n  if (listContext) [showContent, showFallback] = listContext.register(store.state);\n  return createComponent(SuspenseContext.Provider, {\n    value: store,\n    children: () => {\n      const rendered = sample(() => props.children);\n      return () => {\n        const value = store.state(),\n              visibleContent = showContent ? showContent() : true,\n              visibleFallback = showFallback ? showFallback() : true;\n        if (store.initializing) store.initializing = false;\n        if (value === \"running\" && visibleContent || value === \"suspended\") return rendered;\n        if (!visibleFallback) return;\n        return props.fallback;\n      };\n    }\n  }, [\"children\"]);\n}\n\nexport { $RAW, Dynamic, For, Index, Match, Show, Suspense, SuspenseContext, SuspenseList, Switch, afterEffects, awaitSuspense, cancelCallback, cloneProps, createComponent, createContext, createDeferred, createDependentEffect, createEffect, createMemo, createResource, createResourceState, createRoot, createSignal, createState, equalFn, freeze, getContextOwner, indexArray, isListening, lazy, mapArray, onCleanup, onError, reconcile, requestCallback, sample, setDefaults, splitProps, suspend, unwrap, useContext, useTransition };\n","import { createMemo, createRoot, createEffect, sample, onCleanup, splitProps } from '../index.js';\nexport { For, Index, Match, Show, Suspense, SuspenseList, Switch, createComponent, getContextOwner as currentContext, createEffect as effect } from '../index.js';\n\nconst Types = {\n  ATTRIBUTE: \"attribute\",\n  PROPERTY: \"property\"\n},\n      Attributes = {\n  href: {\n    type: Types.ATTRIBUTE\n  },\n  style: {\n    type: Types.PROPERTY,\n    alias: \"style.cssText\"\n  },\n  for: {\n    type: Types.PROPERTY,\n    alias: \"htmlFor\"\n  },\n  class: {\n    type: Types.PROPERTY,\n    alias: \"className\"\n  },\n  spellCheck: {\n    type: Types.PROPERTY,\n    alias: \"spellcheck\"\n  },\n  allowFullScreen: {\n    type: Types.PROPERTY,\n    alias: \"allowFullscreen\"\n  },\n  autoCapitalize: {\n    type: Types.PROPERTY,\n    alias: \"autocapitalize\"\n  },\n  autoFocus: {\n    type: Types.PROPERTY,\n    alias: \"autofocus\"\n  },\n  autoPlay: {\n    type: Types.PROPERTY,\n    alias: \"autoplay\"\n  }\n},\n      SVGAttributes = {\n  className: {\n    type: Types.ATTRIBUTE,\n    alias: \"class\"\n  },\n  htmlFor: {\n    type: Types.ATTRIBUTE,\n    alias: \"for\"\n  },\n  tabIndex: {\n    type: Types.ATTRIBUTE,\n    alias: \"tabindex\"\n  },\n  allowReorder: {\n    type: Types.ATTRIBUTE\n  },\n  attributeName: {\n    type: Types.ATTRIBUTE\n  },\n  attributeType: {\n    type: Types.ATTRIBUTE\n  },\n  autoReverse: {\n    type: Types.ATTRIBUTE\n  },\n  baseFrequency: {\n    type: Types.ATTRIBUTE\n  },\n  calcMode: {\n    type: Types.ATTRIBUTE\n  },\n  clipPathUnits: {\n    type: Types.ATTRIBUTE\n  },\n  contentScriptType: {\n    type: Types.ATTRIBUTE\n  },\n  contentStyleType: {\n    type: Types.ATTRIBUTE\n  },\n  diffuseConstant: {\n    type: Types.ATTRIBUTE\n  },\n  edgeMode: {\n    type: Types.ATTRIBUTE\n  },\n  externalResourcesRequired: {\n    type: Types.ATTRIBUTE\n  },\n  filterRes: {\n    type: Types.ATTRIBUTE\n  },\n  filterUnits: {\n    type: Types.ATTRIBUTE\n  },\n  gradientTransform: {\n    type: Types.ATTRIBUTE\n  },\n  gradientUnits: {\n    type: Types.ATTRIBUTE\n  },\n  kernelMatrix: {\n    type: Types.ATTRIBUTE\n  },\n  kernelUnitLength: {\n    type: Types.ATTRIBUTE\n  },\n  keyPoints: {\n    type: Types.ATTRIBUTE\n  },\n  keySplines: {\n    type: Types.ATTRIBUTE\n  },\n  keyTimes: {\n    type: Types.ATTRIBUTE\n  },\n  lengthAdjust: {\n    type: Types.ATTRIBUTE\n  },\n  limitingConeAngle: {\n    type: Types.ATTRIBUTE\n  },\n  markerHeight: {\n    type: Types.ATTRIBUTE\n  },\n  markerUnits: {\n    type: Types.ATTRIBUTE\n  },\n  maskContentUnits: {\n    type: Types.ATTRIBUTE\n  },\n  maskUnits: {\n    type: Types.ATTRIBUTE\n  },\n  numOctaves: {\n    type: Types.ATTRIBUTE\n  },\n  pathLength: {\n    type: Types.ATTRIBUTE\n  },\n  patternContentUnits: {\n    type: Types.ATTRIBUTE\n  },\n  patternTransform: {\n    type: Types.ATTRIBUTE\n  },\n  patternUnits: {\n    type: Types.ATTRIBUTE\n  },\n  pointsAtX: {\n    type: Types.ATTRIBUTE\n  },\n  pointsAtY: {\n    type: Types.ATTRIBUTE\n  },\n  pointsAtZ: {\n    type: Types.ATTRIBUTE\n  },\n  preserveAlpha: {\n    type: Types.ATTRIBUTE\n  },\n  preserveAspectRatio: {\n    type: Types.ATTRIBUTE\n  },\n  primitiveUnits: {\n    type: Types.ATTRIBUTE\n  },\n  refX: {\n    type: Types.ATTRIBUTE\n  },\n  refY: {\n    type: Types.ATTRIBUTE\n  },\n  repeatCount: {\n    type: Types.ATTRIBUTE\n  },\n  repeatDur: {\n    type: Types.ATTRIBUTE\n  },\n  requiredExtensions: {\n    type: Types.ATTRIBUTE\n  },\n  requiredFeatures: {\n    type: Types.ATTRIBUTE\n  },\n  specularConstant: {\n    type: Types.ATTRIBUTE\n  },\n  specularExponent: {\n    type: Types.ATTRIBUTE\n  },\n  spreadMethod: {\n    type: Types.ATTRIBUTE\n  },\n  startOffset: {\n    type: Types.ATTRIBUTE\n  },\n  stdDeviation: {\n    type: Types.ATTRIBUTE\n  },\n  stitchTiles: {\n    type: Types.ATTRIBUTE\n  },\n  surfaceScale: {\n    type: Types.ATTRIBUTE\n  },\n  systemLanguage: {\n    type: Types.ATTRIBUTE\n  },\n  tableValues: {\n    type: Types.ATTRIBUTE\n  },\n  targetX: {\n    type: Types.ATTRIBUTE\n  },\n  targetY: {\n    type: Types.ATTRIBUTE\n  },\n  textLength: {\n    type: Types.ATTRIBUTE\n  },\n  viewBox: {\n    type: Types.ATTRIBUTE\n  },\n  viewTarget: {\n    type: Types.ATTRIBUTE\n  },\n  xChannelSelector: {\n    type: Types.ATTRIBUTE\n  },\n  yChannelSelector: {\n    type: Types.ATTRIBUTE\n  },\n  zoomAndPan: {\n    type: Types.ATTRIBUTE\n  }\n};\nconst NonComposedEvents = new Set([\"abort\", \"animationstart\", \"animationend\", \"animationiteration\", \"blur\", \"change\", \"copy\", \"cut\", \"error\", \"focus\", \"gotpointercapture\", \"load\", \"loadend\", \"loadstart\", \"lostpointercapture\", \"mouseenter\", \"mouseleave\", \"paste\", \"progress\", \"reset\", \"scroll\", \"select\", \"submit\", \"transitionstart\", \"transitioncancel\", \"transitionend\", \"transitionrun\"]);\n\nfunction memo(fn, equal) {\n  return createMemo(fn, undefined, equal);\n}\n\nfunction reconcileArrays(parentNode, a, b) {\n  let bLength = b.length,\n      aEnd = a.length,\n      bEnd = bLength,\n      aStart = 0,\n      bStart = 0,\n      after = a[aEnd - 1].nextSibling,\n      map = null;\n  while (aStart < aEnd || bStart < bEnd) {\n    if (aEnd === aStart) {\n      const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;\n      while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);\n    } else if (bEnd === bStart) {\n      while (aStart < aEnd) {\n        if (!map || !map.has(a[aStart])) parentNode.removeChild(a[aStart]);\n        aStart++;\n      }\n    } else if (a[aStart] === b[bStart]) {\n      aStart++;\n      bStart++;\n    } else if (a[aEnd - 1] === b[bEnd - 1]) {\n      aEnd--;\n      bEnd--;\n    } else if (aEnd - aStart === 1 && bEnd - bStart === 1) {\n      if (map && map.has(a[aStart]) || a[aStart].parentNode !== parentNode) {\n        parentNode.insertBefore(b[bStart], bEnd < bLength ? b[bEnd] : after);\n      } else parentNode.replaceChild(b[bStart], a[aStart]);\n      break;\n    } else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {\n      const node = a[--aEnd].nextSibling;\n      parentNode.insertBefore(b[bStart++], a[aStart++].nextSibling);\n      parentNode.insertBefore(b[--bEnd], node);\n      a[aEnd] = b[bEnd];\n    } else {\n      if (!map) {\n        map = new Map();\n        let i = bStart;\n        while (i < bEnd) map.set(b[i], i++);\n      }\n      if (map.has(a[aStart])) {\n        const index = map.get(a[aStart]);\n        if (bStart < index && index < bEnd) {\n          let i = aStart,\n              sequence = 1;\n          while (++i < aEnd && i < bEnd) {\n            if (!map.has(a[i]) || map.get(a[i]) !== index + sequence) break;\n            sequence++;\n          }\n          if (sequence > index - bStart) {\n            const node = a[aStart];\n            while (bStart < index) parentNode.insertBefore(b[bStart++], node);\n          } else parentNode.replaceChild(b[bStart++], a[aStart++]);\n        } else aStart++;\n      } else parentNode.removeChild(a[aStart++]);\n    }\n  }\n}\n\nconst eventRegistry = new Set(),\n      hydration = globalThis._$HYDRATION || (globalThis._$HYDRATION = {});\nfunction render(code, element) {\n  let disposer;\n  createRoot(dispose => {\n    disposer = dispose;\n    insert(element, code(), element.firstChild ? null : undefined);\n  });\n  return disposer;\n}\nfunction renderToString(code, options = {}) {\n  options = {\n    timeoutMs: 30000,\n    ...options\n  };\n  hydration.context = {\n    id: \"0\",\n    count: 0\n  };\n  return createRoot(() => {\n    const rendered = code();\n    if (typeof rendered === \"object\" && \"then\" in rendered) {\n      const timeout = new Promise((_, reject) => setTimeout(() => reject(\"renderToString timed out\"), options.timeoutMs));\n      return Promise.race([rendered, timeout]).then(resolveSSRNode);\n    }\n    return resolveSSRNode(rendered);\n  });\n}\nfunction renderDOMToString(code, options = {}) {\n  options = {\n    timeoutMs: 30000,\n    ...options\n  };\n  hydration.context = {\n    id: \"0\",\n    count: 0\n  };\n  const container = document.createElement(\"div\");\n  document.body.appendChild(container);\n  return createRoot(d1 => {\n    const rendered = code();\n    function resolve(rendered) {\n      createRoot(d2 => (insert(container, rendered), d1(), d2()));\n      const html = container.innerHTML;\n      document.body.removeChild(container);\n      return html;\n    }\n    if (typeof rendered === \"object\" && \"then\" in rendered) {\n      const timeout = new Promise((_, reject) => setTimeout(() => reject(\"renderToString timed out\"), options.timeoutMs));\n      return Promise.race([rendered, timeout]).then(resolve);\n    }\n    return resolve(rendered);\n  });\n}\nfunction hydrate(code, element) {\n  hydration.context = {\n    id: \"0\",\n    count: 0,\n    registry: {}\n  };\n  const templates = element.querySelectorAll(`*[_hk]`);\n  Array.prototype.reduce.call(templates, (memo, node) => {\n    const id = node.getAttribute(\"_hk\"),\n          list = memo[id] || (memo[id] = []);\n    list.push(node);\n    return memo;\n  }, hydration.context.registry);\n  const dispose = render(code, element);\n  delete hydration.context;\n  return dispose;\n}\nfunction template(html, check, isSVG) {\n  const t = document.createElement(\"template\");\n  t.innerHTML = html;\n  if (check && t.innerHTML.split(\"<\").length - 1 !== check) throw `Template html does not match input:\\n${t.innerHTML}\\n\\n${html}`;\n  let node = t.content.firstChild;\n  if (isSVG) node = node.firstChild;\n  return node;\n}\nfunction delegateEvents(eventNames) {\n  for (let i = 0, l = eventNames.length; i < l; i++) {\n    const name = eventNames[i];\n    if (!eventRegistry.has(name)) {\n      eventRegistry.add(name);\n      document.addEventListener(name, eventHandler);\n    }\n  }\n}\nfunction clearDelegatedEvents() {\n  for (let name of eventRegistry.keys()) document.removeEventListener(name, eventHandler);\n  eventRegistry.clear();\n}\nfunction setAttribute(node, name, value) {\n  if (value === false || value == null) node.removeAttribute(name);else node.setAttribute(name, value);\n}\nfunction setAttributeNS(node, namespace, name, value) {\n  if (value === false || value == null) node.removeAttributeNS(namespace, name);else node.setAttributeNS(namespace, name, value);\n}\nfunction classList(node, value, prev) {\n  const classKeys = Object.keys(value);\n  for (let i = 0, len = classKeys.length; i < len; i++) {\n    const key = classKeys[i],\n          classValue = !!value[key],\n          classNames = key.split(/\\s+/);\n    if (!key || prev && prev[key] === classValue) continue;\n    for (let j = 0, nameLen = classNames.length; j < nameLen; j++) node.classList.toggle(classNames[j], classValue);\n  }\n  return value;\n}\nfunction style(node, value, prev) {\n  const nodeStyle = node.style;\n  if (typeof value === \"string\") return nodeStyle.cssText = value;\n  let v, s;\n  if (prev != null && typeof prev !== \"string\") {\n    for (s in value) {\n      v = value[s];\n      v !== prev[s] && nodeStyle.setProperty(s, v);\n    }\n    for (s in prev) {\n      value[s] == null && nodeStyle.removeProperty(s);\n    }\n  } else {\n    for (s in value) nodeStyle.setProperty(s, value[s]);\n  }\n  return value;\n}\nfunction spread(node, accessor, isSVG, skipChildren) {\n  if (typeof accessor === \"function\") {\n    createEffect(current => spreadExpression(node, accessor(), current, isSVG, skipChildren));\n  } else spreadExpression(node, accessor, undefined, isSVG, skipChildren);\n}\nfunction insert(parent, accessor, marker, initial) {\n  if (marker !== undefined && !initial) initial = [];\n  if (typeof accessor !== \"function\") return insertExpression(parent, accessor, initial, marker);\n  createEffect(current => insertExpression(parent, accessor(), current, marker), initial);\n}\nfunction assign(node, props, isSVG, skipChildren, prevProps = {}) {\n  let info;\n  for (const prop in props) {\n    if (prop === \"children\") {\n      if (!skipChildren) insertExpression(node, props.children);\n      continue;\n    }\n    const value = props[prop];\n    if (value === prevProps[prop]) continue;\n    if (prop === \"style\") {\n      style(node, value, prevProps[prop]);\n    } else if (prop === \"classList\") {\n      classList(node, value, prevProps[prop]);\n    } else if (prop === \"ref\") {\n      value(node);\n    } else if (prop === \"on\") {\n      for (const eventName in value) node.addEventListener(eventName, value[eventName]);\n    } else if (prop === \"onCapture\") {\n      for (const eventName in value) node.addEventListener(eventName, value[eventName], true);\n    } else if (prop.slice(0, 2) === \"on\") {\n      const lc = prop.toLowerCase();\n      if (!NonComposedEvents.has(lc.slice(2))) {\n        const name = lc.slice(2);\n        if (Array.isArray(value)) {\n          node[`__${name}`] = value[0];\n          node[`__${name}Data`] = value[1];\n        } else node[`__${name}`] = value;\n        delegateEvents([name]);\n      } else node[lc] = value;\n    } else if (info = Attributes[prop]) {\n      if (info.type === \"attribute\") {\n        setAttribute(node, prop, value);\n      } else node[info.alias] = value;\n    } else if (isSVG || prop.indexOf(\"-\") > -1 || prop.indexOf(\":\") > -1) {\n      const ns = prop.indexOf(\":\") > -1 && SVGNamepace[prop.split(\":\")[0]];\n      if (ns) setAttributeNS(node, ns, prop, value);else if (info = SVGAttributes[prop]) {\n        if (info.alias) setAttribute(node, info.alias, value);else setAttribute(node, prop, value);\n      } else setAttribute(node, prop.replace(/([A-Z])/g, g => `-${g[0].toLowerCase()}`), value);\n    } else node[prop] = value;\n    prevProps[prop] = value;\n  }\n}\nfunction ssr(t, ...nodes) {\n  if (!nodes.length) return {\n    t\n  };\n  for (let i = 0; i < nodes.length; i++) {\n    const n = nodes[i];\n    if (typeof n === \"function\") nodes[i] = memo(() => resolveSSRNode(n()));\n  }\n  return {\n    t: () => {\n      let result = \"\";\n      for (let i = 0; i < t.length; i++) {\n        result += t[i];\n        const node = nodes[i];\n        if (node !== undefined) result += resolveSSRNode(node);\n      }\n      return result;\n    }\n  };\n}\nfunction ssrClassList(value) {\n  let classKeys = Object.keys(value),\n      result = \"\";\n  for (let i = 0, len = classKeys.length; i < len; i++) {\n    const key = classKeys[i],\n          classValue = !!value[key];\n    if (!key || !classValue) continue;\n    i && (result += \" \");\n    result += key;\n  }\n  return result;\n}\nfunction ssrStyle(value) {\n  if (typeof value === \"string\") return value;\n  let result = \"\";\n  const k = Object.keys(value);\n  for (let i = 0; i < k.length; i++) {\n    const s = k[i];\n    if (i) result += \";\";\n    result += `${s}:${escape(value[s], true)}`;\n  }\n  return result;\n}\nfunction ssrSpread(props, isSVG) {\n  return () => {\n    if (typeof props === \"function\") props = props();\n    const keys = Object.keys(props);\n    let result = \"\";\n    for (let i = 0; i < keys.length; i++) {\n      const prop = keys[i];\n      if (prop === \"children\") {\n        console.warn(`SSR currently does not support spread children.`);\n        continue;\n      }\n      const value = props[prop];\n      if (prop === \"style\") {\n        result += `style=\"${ssrStyle(value)}\"`;\n      } else if (prop === \"classList\") {\n        result += `class=\"${ssrClassList(value)}\"`;\n      } else {\n        const key = toSSRAttribute(prop, isSVG);\n        result += `${key}=\"${escape(value, true)}\"`;\n      }\n      if (i !== keys.length - 1) result += \" \";\n    }\n    return result;\n  };\n}\nconst ATTR_REGEX = /[&<\"]/g,\n      CONTENT_REGEX = /[&<]/g;\nfunction escape(html, attr) {\n  if (typeof html !== \"string\") return html;\n  return html.replace(attr ? ATTR_REGEX : CONTENT_REGEX, m => {\n    switch (m) {\n      case \"&\":\n        return \"&amp;\";\n      case \"<\":\n        return \"&lt;\";\n      case '\"':\n        return \"&quot;\";\n    }\n  });\n}\nfunction getNextElement(template, isSSR) {\n  const hydrate = hydration.context;\n  let node, key;\n  if (!hydrate || !hydrate.registry || !((key = getHydrationKey()) && hydrate.registry[key] && (node = hydrate.registry[key].shift()))) {\n    const el = template.cloneNode(true);\n    if (isSSR && hydrate) el.setAttribute(\"_hk\", getHydrationKey());\n    return el;\n  }\n  if (hydration && hydration.completed) hydration.completed.add(node);\n  return node;\n}\nfunction getNextMarker(start) {\n  let end = start,\n      count = 0,\n      current = [];\n  if (hydration.context && hydration.context.registry) {\n    while (end) {\n      if (end.nodeType === 8) {\n        const v = end.nodeValue;\n        if (v === \"#\") count++;else if (v === \"/\") {\n          if (count === 0) return [end, current];\n          count--;\n        }\n      }\n      current.push(end);\n      end = end.nextSibling;\n    }\n  }\n  return [end, current];\n}\nfunction runHydrationEvents(el) {\n  if (hydration && hydration.events) {\n    const {\n      completed,\n      events\n    } = hydration;\n    while (events.length) {\n      const [el, e] = events[0];\n      if (!completed.has(el)) return;\n      eventHandler(e);\n      events.shift();\n    }\n  }\n}\nfunction getHydrationKey() {\n  return hydration.context.id;\n}\nfunction generateHydrationEventsScript(eventNames) {\n  return `(()=>{_$HYDRATION={events:[],completed:new WeakSet};const t=e=>e&&e.hasAttribute&&(e.hasAttribute(\"_hk\")&&e||t(e.host&&e.host instanceof Node?e.host:e.parentNode)),e=e=>{let o=e.composedPath&&e.composedPath()[0]||e.target,s=t(o);s&&!_$HYDRATION.completed.has(s)&&_$HYDRATION.events.push([s,e])};[\"${eventNames.join('\",\"')}\"].forEach(t=>document.addEventListener(t,e))})();`;\n}\nfunction eventHandler(e) {\n  const key = `__${e.type}`;\n  let node = e.composedPath && e.composedPath()[0] || e.target;\n  if (e.target !== node) {\n    Object.defineProperty(e, \"target\", {\n      configurable: true,\n      value: node\n    });\n  }\n  Object.defineProperty(e, \"currentTarget\", {\n    configurable: true,\n    get() {\n      return node;\n    }\n  });\n  while (node !== null) {\n    const handler = node[key];\n    if (handler) {\n      const data = node[`${key}Data`];\n      data ? handler(data, e) : handler(e);\n      if (e.cancelBubble) return;\n    }\n    node = node.host && node.host instanceof Node ? node.host : node.parentNode;\n  }\n}\nfunction spreadExpression(node, props, prevProps = {}, isSVG, skipChildren) {\n  if (!skipChildren && \"children\" in props) {\n    createEffect(() => prevProps.children = insertExpression(node, props.children, prevProps.children));\n  }\n  createEffect(() => assign(node, props, isSVG, true, prevProps));\n  return prevProps;\n}\nfunction insertExpression(parent, value, current, marker, unwrapArray) {\n  while (typeof current === \"function\") current = current();\n  if (value === current) return current;\n  const t = typeof value,\n        multi = marker !== undefined;\n  parent = multi && current[0] && current[0].parentNode || parent;\n  if (t === \"string\" || t === \"number\") {\n    if (t === \"number\") value = value.toString();\n    if (multi) {\n      let node = current[0];\n      if (node && node.nodeType === 3) {\n        node.data = value;\n      } else node = document.createTextNode(value);\n      current = cleanChildren(parent, current, marker, node);\n    } else {\n      if (current !== \"\" && typeof current === \"string\") {\n        current = parent.firstChild.data = value;\n      } else current = parent.textContent = value;\n    }\n  } else if (value == null || t === \"boolean\") {\n    if (hydration.context && hydration.context.registry) return current;\n    current = cleanChildren(parent, current, marker);\n  } else if (t === \"function\") {\n    createEffect(() => current = insertExpression(parent, value(), current, marker));\n    return () => current;\n  } else if (Array.isArray(value)) {\n    const array = [];\n    if (normalizeIncomingArray(array, value, unwrapArray)) {\n      createEffect(() => current = insertExpression(parent, array, current, marker, true));\n      return () => current;\n    }\n    if (hydration.context && hydration.context.registry) return array;\n    if (array.length === 0) {\n      current = cleanChildren(parent, current, marker);\n      if (multi) return current;\n    } else {\n      if (Array.isArray(current)) {\n        if (current.length === 0) {\n          appendNodes(parent, array, marker);\n        } else reconcileArrays(parent, current, array);\n      } else if (current == null || current === \"\") {\n        appendNodes(parent, array);\n      } else {\n        reconcileArrays(parent, multi && current || [parent.firstChild], array);\n      }\n    }\n    current = array;\n  } else if (value instanceof Node) {\n    if (Array.isArray(current)) {\n      if (multi) return current = cleanChildren(parent, current, marker, value);\n      cleanChildren(parent, current, null, value);\n    } else if (current == null || current === \"\" || !parent.firstChild) {\n      parent.appendChild(value);\n    } else parent.replaceChild(value, parent.firstChild);\n    current = value;\n  } else console.warn(`Skipped inserting`, value);\n  return current;\n}\nfunction normalizeIncomingArray(normalized, array, unwrap) {\n  let dynamic = false;\n  for (let i = 0, len = array.length; i < len; i++) {\n    let item = array[i],\n        t;\n    if (item instanceof Node) {\n      normalized.push(item);\n    } else if (item == null || item === true || item === false) ; else if (Array.isArray(item)) {\n      dynamic = normalizeIncomingArray(normalized, item) || dynamic;\n    } else if ((t = typeof item) === \"string\") {\n      normalized.push(document.createTextNode(item));\n    } else if (t === \"function\") {\n      if (unwrap) {\n        const idx = item();\n        dynamic = normalizeIncomingArray(normalized, Array.isArray(idx) ? idx : [idx]) || dynamic;\n      } else {\n        normalized.push(item);\n        dynamic = true;\n      }\n    } else normalized.push(document.createTextNode(item.toString()));\n  }\n  return dynamic;\n}\nfunction appendNodes(parent, array, marker) {\n  for (let i = 0, len = array.length; i < len; i++) parent.insertBefore(array[i], marker);\n}\nfunction cleanChildren(parent, current, marker, replacement) {\n  if (marker === undefined) return parent.textContent = \"\";\n  const node = replacement || document.createTextNode(\"\");\n  if (current.length) {\n    let inserted = false;\n    for (let i = current.length - 1; i >= 0; i--) {\n      const el = current[i];\n      if (node !== el) {\n        const isParent = el.parentNode === parent;\n        if (!inserted && !i) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);else isParent && parent.removeChild(el);\n      } else inserted = true;\n    }\n  } else parent.insertBefore(node, marker);\n  return [node];\n}\nfunction toSSRAttribute(key, isSVG) {\n  if (isSVG) {\n    const attr = SVGAttributes[key];\n    if (attr) {\n      if (attr.alias) key = attr.alias;\n    } else key = key.replace(/([A-Z])/g, g => `-${g[0].toLowerCase()}`);\n  } else {\n    const attr = SVGAttributes[key];\n    if (attr && attr.alias) key = attr.alias;\n    key = key.toLowerCase();\n  }\n  return key;\n}\nfunction resolveSSRNode(node) {\n  if (Array.isArray(node)) return node.map(resolveSSRNode).join(\"\");\n  const t = typeof node;\n  if (node && t === \"object\") return resolveSSRNode(node.t);\n  if (t === \"function\") return resolveSSRNode(node());\n  return t === \"string\" ? node : JSON.stringify(node);\n}\n\nfunction Portal(props) {\n  const {\n    useShadow\n  } = props,\n        container = document.createElement(\"div\"),\n        marker = document.createTextNode(\"\"),\n        mount = props.mount || document.body,\n        renderRoot = useShadow && container.attachShadow ? container.attachShadow({\n    mode: \"open\"\n  }) : container;\n  Object.defineProperty(container, \"host\", {\n    get() {\n      return marker.parentNode;\n    }\n  });\n  insert(renderRoot, sample(() => props.children));\n  mount.appendChild(container);\n  props.ref && props.ref(container);\n  onCleanup(() => mount.removeChild(container));\n  return marker;\n}\nfunction Dynamic(props) {\n  const [p, others] = splitProps(props, [\"component\"]);\n  return () => {\n    const comp = p.component,\n          t = typeof comp;\n    if (comp) {\n      if (t === \"function\") return sample(() => comp(others));else if (t === \"string\") {\n        const el = document.createElement(comp);\n        spread(el, others);\n        return el;\n      }\n    }\n  };\n}\n\nexport { Dynamic, Portal, assign, classList, clearDelegatedEvents, delegateEvents, escape, generateHydrationEventsScript, getHydrationKey, getNextElement, getNextMarker, hydrate, insert, memo, render, renderDOMToString, renderToString, runHydrationEvents, setAttribute, setAttributeNS, spread, ssr, ssrClassList, ssrSpread, ssrStyle, style, template };\n","import { render } from \"solid-js/dom\";\nimport { createSignal, onCleanup, createEffect, createState } from \"solid-js\";\n\nclass Renderer {\n\n\tconstructor() {\n\t\tthis._react = null;\n\t}\n\n\tinit() {\n\t\tconst App = () => {\n\t\t\t// create solid state\n\t\t\tlet [state, setState] = createState({filePath:\"not reactive!\"});\n\t\t\tthis._react = { state, setState }\n\n\t\t\t// print file path on change\n\t\t\tcreateEffect(()=>console.log(\"\\n\\nfilePath:\", state.filePath, \"\\n\\n\\n\"));\n\n\t\t\tconst [count, setCount] = createSignal(0),\n\t\t\ttimer = setInterval(() => setCount(count() + 1), 1000);\n\t\t\tonCleanup(() => clearInterval(timer));\n\n\t\t\t// components\n\t\t\tconst AppSidebar = () => {\n\t\t\t\treturn (<div id=\"sidebar\">\n\t\t\t\t\t<div class=\"explorer\" id=\"explorer\"></div>\n\t\t\t\t</div>);\n\t\t\t}\n\n\t\t\tconst AppContent = () => {\n\t\t\t\treturn (<div id=\"content\">Counter: {count()}</div>);\n\t\t\t}\n\n\t\t\tconst AppFooter = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<div id=\"footer\" onClick={() => setState(\"filePath\", l => l + \"!\")}>\n\t\t\t\t\t\t<div id=\"title\">{state.filePath}</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn (<div id=\"app\">\n\t\t\t\t<AppSidebar />\n\t\t\t\t<AppContent />\n\t\t\t\t<AppFooter />\n\t\t\t</div>)\n\t\t}\n\n\t\trender(() => <App />, document.body);\n\t}\n}\n\nexport default Renderer;","import Renderer from './render';\n\n////////////////////////////////////////////////////////////\n\nlet renderer;\n\nonload = function(){\n\trenderer = new Renderer();\n\trenderer.init();\n}"],"sourceRoot":""}